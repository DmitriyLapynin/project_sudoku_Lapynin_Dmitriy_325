-- Задание судоку первый этап: основные типы и описание основных функций 
 
-- игровое поле
data Field = Field 
    { width :: Int -- ширина игрового поля в клетках
    , height :: Int -- высота игрового поля в клетках 
    , nums :: [[Int]] -- матрица значений
    }


-- нарисовать всю игру
draw_game :: Field -> Picture

-- нарисовать таблицу
draw_grid :: Field -> Picture

--перевод чисел строки в список целых чисел
make_num :: String -> [Int]

-- создание матрицы; второй аргумент здесь - это накапливающий параметр
make_matr :: [Int] -> [Int]-> [[Int]]

-- создаём таблицу
read_field :: String -> Field
read_field x = Field
    { width = 9
    , height = 9
    , numbers = ???
    }

-- запускаем игру
play_game :: Field -> IO()

-- обрабатываем событие
handle_event :: Event -> Field -> Field  

-- нарисовать начальные числа 
draw_nums :: Field -> Picture 

-- вывести сообщение об окончании игры
draw_end :: Field -> Picture

-- получить координату числа по Х
make_X :: [[Int]] -> [Float]

-- получить координату числа по Y
make_Y :: [[Int]] -> [Float]

-- проверяем строку на наличие введеной пользователем цифры 
check_str :: [[Int]] -> Bool

-- проверяем столбец на наличие введеной пользователем цифры 
check_column :: [[Int]] -> Bool

-- проверяем квадрат 3x3 на наличие введеной пользователем цифры 
check_square :: [[Int]] -> Bool

-- Выводим ошибку, если цифра уже есть либо в строке, либо в столбце, либо в квадрате
warning :: Field -> Picture

-- если нулей не осталось, то все клетки заполнены => победа
check_win :: Field -> Bool
